// Generated by CoffeeScript 2.3.2
var dly,
  indexOf = [].indexOf;

dly = util.dly;

module.exports = async function(pre, app, bot, c, qiniu) {
  var AgentOp, Ty, addFriend, alex, bigGroup, bjGroup, checkAndAddGroup, cleanRoom, code, drGroup, drRm, e, evtGroup, evtLink, evtRm, exGroup, fRoom, fcRoom, groupSay, inGroup, initList, makeAnnounce, nf, petQr, picUrl, pickContact, pickContactId, pickRoom, saveActQrcode, saveQrCode, sendGroupMsg, sendPicTxt, smGroup, smRm, testGroup, uSession, urlLink;
  code = c.code;
  ({pickRoom, fRoom, fcRoom, addFriend, pickContact, pickContactId, saveQrCode, sendPicTxt, makeAnnounce, groupSay, sendGroupMsg, urlLink, cleanRoom, initList} = require('./lib')(c, bot, qiniu));
  ({bigGroup, inGroup, exGroup, smGroup, evtGroup, bjGroup, drGroup, testGroup, petQr} = require('./def'));
  picUrl = cf._qnSetHref(util.qnUrl('show', '8444042109959.jpg'));
  evtLink = urlLink('PET Weekly Events', 'PET 一周活动汇总', picUrl, 'http://postenglishtime.com/wm');
  app.post(`${pre}evt/salonInfo`, async function(req, rsp) {
    var ao, bo, u;
    bo = req.body;
    u = (await bot.Contact.find({
      name: bo.user.username
    }));
    if (u) {
      ao = (await dao.one(code, 'agentOp', {
        code: 'host salon'
      }));
      await u.say(ao.content);
      await u.say('请在下面公号里面输入：host，按照提示录入话题就行。个人信息一定要填写：行业，职位，个人介绍，这些会在周一时发公号，如果换照片，在个人照片里上传，取第一张。');
    }
    return rsp.json({
      msg: 'ok'
    });
  });
  app.post(`${pre}evt/actPubNow`, async function(req, rsp) {
    var act, bo, msg, pic;
    bo = req.body;
    act = (await dao.one(code, 'activity', {
      _id: oid(bo.aid)
    }));
    if (act) {
      pic = util.refFile(act, 'ad');
      msg = act.adStr || act.brief;
      if (bo.group === 'allAnn') {
        await makeAnnounce(bigGroup, msg, pic);
        await groupSay([...inGroup, ...exGroup], msg, pic);
      } else if (bo.group === 'all') {
        await groupSay([...bigGroup, ...inGroup, ...exGroup], msg, pic);
      } else if (bo.group) {
        await groupSay(bo.group, msg, pic);
      }
    }
    return rsp.json({
      msg: 'ok'
    });
  });
  app.post(`${pre}evt/pubNow`, async function(req, rsp) {
    var bo;
    bo = req.body;
    if (bo.text) {
      if (bo.ann === 'all') {
        await makeAnnounce(bigGroup, bo.brief, bo.pic);
        await groupSay([...inGroup, ...exGroup], bo.brief, bo.pic);
      }
      if (bo.ann) {
        await makeAnnounce(bo.ann.split(','), bo.text, bo.url);
      }
      if (bo.say) {
        await groupSay(bo.say.ann.split(','), bo.text, bo.url);
      }
      return rsp.json({
        msg: 'ok'
      });
    }
  });
  app.post(`${pre}evt/toUser`, async function(req, rsp) {
    var bo, ro;
    bo = req.body;
    ro = (await pickContact(bo.wtName));
    await ro.say(bo.msg);
    return rsp.json({
      msg: 'ok'
    });
  });
  app.post(`${pre}evt/toHost`, async function(req, rsp) {
    var act, bo, msg, ro, u;
    bo = req.body;
    act = (await dao.one(code, 'activity', {
      _id: oid(bo.aid)
    }));
    if (act && act.master.length) {
      msg = act.master[0].username;
      if (u = (await pickContact(msg))) {
        await u.say('请在合适的时间转发朋友圈或者邀请合适的朋友来参加。');
        await dly(2);
        await sendPicTxt(u, act.brief, util.refFile(act, 'ad'));
        ro = {
          msg: 'done: ' + msg
        };
      } else {
        ro = {
          msg: 'no name: ' + msg
        };
      }
    }
    return rsp.json(ro);
  });
  app.post(`${pre}evt/sideGroup`, async function(req, rsp) {
    var bo, i, it, j, k, len, len1, len2, lrm, ref, ref1, ref2, ref3, ref4, ref5, rm;
    bo = req.body;
    lrm = (await pickRoom(bo.group));
    rm = (await pickRoom(bo.group + '#'));
    if (rm && lrm) {
      if (bo.type === 'addAll') {
        ref = (await rm.memberAll());
        for (i = 0, len = ref.length; i < len; i++) {
          it = ref[i];
          if (!it.friend()) {
            await addFriend(it, bo.greeting);
          }
        }
      } else if ((ref1 = bo.type) === 'addToGroup' || ref1 === 'addAndRemove') {
        log('add or');
        if (bo.ann) {
          await rm.announce(bo.ann);
        }
        ref2 = (await rm.memberAll());
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          it = ref2[j];
          if (it.friend()) {
            if ((await lrm.has(it))) {
              if ((bo.type === 'addAndRemove') && (ref3 = it.name(), indexOf.call(initList, ref3) < 0)) {
                log('del: ' + it.name());
                await dly();
                await rm.del(it);
              }
            } else {
              log('add: ' + it.name());
              if (bo.greeting) {
                await it.say(bo.greeting);
                await dly();
              }
              await lrm.add(it);
            }
          } else {
            await addFriend(it, bo.greeting);
          }
        }
      } else if (bo.type === 'removeAll') {
        ref4 = (await rm.memberAll());
        for (k = 0, len2 = ref4.length; k < len2; k++) {
          it = ref4[k];
          if ((ref5 = it.name(), indexOf.call(initList, ref5) < 0)) {
            await dly();
            await rm.del(it);
          }
        }
      }
      return rsp.json({
        msg: 'ok'
      });
    } else {
      return rsp.json({
        err: true
      });
    }
  });
  app.post(`${pre}evt/sendGM`, async function(req, rsp) {
    var bo, i, it, len, ref, results, rm;
    bo = req.body;
    rm = (await pickRoom(bo.gName));
    if (rm) {
      ref = (await rm.memberAll());
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        await dly();
        if (it.friend()) {
          if (bo.male && (it.gender() === bot.Contact.Gender.Male)) {
            results.push((await sendPicTxt(it, bo.msg, bo.img)));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  });
  saveActQrcode = async function(it) {
    var $set, e, fn, rm, scope;
    if (it.groupName) {
      rm = (await fcRoom(it.groupName, it));
      if (rm) {
        try {
          scope = 'temp';
          fn = `activity_qr_${util.randomChar(7)}.png`;
          await saveQrCode(rm, scope, fn);
          $set = {
            refFile: it.refFile
          };
          $set.refFile.groupQrcode = [util.qnUrl(scope, fn, c)];
          await dao.update(code, 'activity', {
            _id: it._id
          }, {$set});
          return `done: ${it.title}\n`;
        } catch (error) {
          e = error;
          log(e);
          return `saveError: ${it.title}\n`;
        }
      } else {
        return `no room: ${it.groupName}\n`;
      }
    } else {
      return `no groupName: ${it.groupName}\n`;
    }
  };
  app.post(`${pre}evt/genActQrcode`, async function(req, rsp) {
    var $gte, $lte, acts, bo, i, it, len, msg, q;
    bo = req.body;
    q = bo.aid ? {
      _id: oid(bo.aid)
    } : ($gte = new Date().monday(), $lte = new Date($gte.getTime() + 7 * Date.day), {
      startedDate: {$gte, $lte}
    });
    acts = (await dao.find(code, 'activity', q));
    msg = '';
    for (i = 0, len = acts.length; i < len; i++) {
      it = acts[i];
      msg += (await saveActQrcode(it));
    }
    return rsp.json({
      msg: msg
    });
  });
  //##############################################################
  AgentOp = gEnt(c.code, 'agentOp');
  nf = {
    greet: (await AgentOp.findOne({
      code: 'nfGreet'
    })),
    accept: (await AgentOp.findOne({
      code: 'nfAccept'
    })),
    event: (await AgentOp.findOne({
      code: 'nfEvent'
    })),
    mini: (await AgentOp.findOne({
      code: 'nfMini'
    })),
    groupRule: (await AgentOp.findOne({
      code: 'nfGroupRule'
    })),
    pet: (await AgentOp.findOne({
      code: 'subscribe'
    })),
    hostSalon: (await AgentOp.findOne({
      code: 'host salon'
    })),
    addTopic: (await AgentOp.findOne({
      code: 'host'
    }))
  };
  checkAndAddGroup = async function(group, greeting, clean) {
    var i, it, len, lrm, newList, oldList, ref, ref1, rm;
    lrm = (await pickRoom(group));
    rm = (await pickRoom(group + '#'));
    if (rm && lrm) {
      newList = [];
      oldList = [];
      ref = (await rm.memberAll());
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        await it.sync();
        if (it.friend()) {
          await dly();
          if ((await lrm.has(it))) {
            if (clean && (ref1 = it.name(), indexOf.call(initList, ref1) < 0)) {
              log('del: ' + it.name());
              await rm.del(it);
            }
          } else {
            log('add: ' + it.name());
            await it.say('您好，感谢您来参加活动，现在邀请您进入我们的活动大群：）');
            await dly(2);
            await lrm.add(it);
            oldList.push(it.name());
          }
        } else {
          if (greeting) {
            await addFriend(it, greeting);
          }
          newList.push(it.name());
        }
      }
      return (await alex.say(`new: ${newList.join(',')}\n old: ${oldList.join(',')}`));
    }
  };
  bot.on('friendship', async function(friendship) {
    var e, tt;
    try {
      switch (friendship.type()) {
        case bot.Friendship.Type.Receive:
          log('accept friendship!');
          await friendship.accept();
          await sendPicTxt(friendship.contact(), nf.greet.content, nf.greet.imgUrl);
          tt = friendship.hello();
          if (/豆瓣/.test(tt) || /推荐/.test(tt) || /参加/.test(tt)) {
            await evtRm.add(friendship.contact());
          }
          break;
        case bot.Friendship.Type.Confirm:
          return log('Friendship Confirm');
        case bot.Friendship.Type.Verify:
          log('Friendship Verify');
          //await dly(5)
          //await sendPicTxt friendship.contact(), nf.accept.content
          // 订阅号二维码
          // 如果你对活动有疑问，请发送：1，2，3
          // 1：报名流程，2：延期，3：。。。
          break;
      }
    } catch (error) {
      e = error;
      return log(e);
    }
  });
  uSession = null;
  Ty = bot.Message.Type;
  bot.on('message', async function(m) {
    var aos, apd, apid, cc, contact, e, evt, evtUrl, fBox, fn, fp, nfstr, nob, path, q, ref, ref1, room, sp, text, topic, username;
    if (m.self()) {
      return;
    }
    if (m.age() > 90) {
      return;
    }
    //			log('Message discarded because its TOO OLD(than 1 minute)')
    aos = global.aos;
    try {
      contact = m.from();
      text = m.text();
      room = m.room();
      if (contact) {
        username = contact.name();
      }
      if (room) {
        topic = (await room.topic());
        if (topic === testGroup) {
          return log(`Room: ${topic} Contact: ${username} Content: ${text}`);
        } else if (topic === "PET Ben Cubbage's life in QH") {
          path = util.sPath(code) + '/gShare/';
          if (username === 'Ben ཉི་མ་ཚེ་རིང་།' || username === '汪霄红 Yuki' || username === 'alex') {
            nfstr = `gs6_${Date.now()}_${contact.payload.weixin || contact.id}`;
            if ((ref = m.type()) === Ty.Attachment || ref === Ty.Video || ref === Ty.Audio || ref === Ty.Image) {
              fBox = (await m.toFileBox());
              fn = `${nfstr}.${(fBox.name.split('.')[1])}`;
              fp = path + fn;
              await fBox.toFile(fp);
              return qiniu.upload(c, {
                scope: 'temp'
              }, fn, fp, function() {});
            } else if ((ref1 = m.type()) === Ty.Text || ref1 === Ty.Url) {
              return qiniu.put(c, {
                scope: 'temp'
              }, `${nfstr}.txt`, text, function() {
                return log('txt done');
              });
            }
          }
        } else if (topic === smGroup) {
          return (await addFriend(contact));
        }
      } else {
        if (username === 'alex') {
          if (text.startsWith('ce')) {
            q = {
              status: 2,
              startedDate: {
                $lt: new Date()
              },
              sort: {
                startedDate: -1
              }
            };
            if (evt = (await dao.one(code, 'activity', q))) {
              evtUrl = `http://${c.url}/newAct/activity/${evt._id}`;
              sp = text === 'cef' ? "#!/texas/ladder" : "#!/enroll/cs";
              await m.say(evtUrl + sp);
            }
            return;
          }
        }
        if (apid = aos[text]) {
          apd = (await dao.one(code, 'agentOp', {
            _id: apid
          }));
          cc = apd.type === 'page' ? urlLink(apd.title, apd.help, apd.imgUrl, apd.content) : apd.content;
          await m.say(cc);
          return;
        }
        nob = /活动报名/.test(text) || /报名活动/.test(text) ? nf.event : /小程序/.test(text) ? nf.mini : /群管理/.test(text) ? nf.groupRule : /后英语时代/.test(text) ? nf.pet : null;
        if (nob) {
          await sendPicTxt(m, nob.content, nob.imgUrl);
          return;
        }
        if (/客服/.test(text)) {
          await m.say((await pickContact(csUser)));
        } else if (/活动群/.test(text)) {
          await evtRm.add(contact);
        } else if (/您好/.test(text) || /你好/.test(text) || /hi/.test(text)) {
          await m.say('hi~, 我现在比较忙，请留言，稍后回复您。');
        } else if (/活动信息/.test(text)) {
          await m.say(evtLink);
        } else if (/朗读计划/.test(text)) {
          await drRm.add(contact);
        } else if (/aiarm/.test(text)) {
          uSession = `s::${username}`;
        } else if (/toOut/.test(text)) {
          await bot.logout();
        }
        //				else
        //					await m.say ''
        if (uSession) {
          if ((uSession === `ss::${username}`) && (cc = (await pickContact(initList[1])))) {
            m.forward(cc);
            return uSession = null;
          }
        }
      }
    } catch (error) {
      e = error;
      return log(e);
    }
  });
  require('./timer')(c, bot, qiniu);
  if (bot.logonoff()) {
    log('pet start...');
    try {
      await dly();
      evtRm = (await pickRoom(evtGroup));
      drRm = (await pickRoom(drGroup));
      smRm = (await pickRoom(smGroup));
      cf.petOwner = alex = (await pickContactId('fish_alex'));
      smRm.on('join', async function(inviteeList, inviter) {
        var i, it, len, results;
        log('sm join: ' + inviter.name());
        if (inviter.name() === '可爱的PET') {
          results = [];
          for (i = 0, len = inviteeList.length; i < len; i++) {
            it = inviteeList[i];
            if (it.friend()) {
              results.push(it.say('您好，我们的活动需要提前交费，有什么问题，请给我留言。'));
            } else {
              results.push((await addFriend(it, '您好，感谢报名我们的活动，活动需要提前交费')));
            }
          }
          return results;
        }
      });
      //------------------------------

      //			log bot.userSelf()
      return ee.on('wechaty', async function(key, list, gName) {
        var et, fm;
        et = list[0];
        if (key === 'createMeeting') {
          fm = (await fRoom(gName));
          if (fm) {
            return groupSay(fm, `邀请您参加腾讯会议\n会议主题：${et.subject}\n会议时间：${new Date(et.start_time * 1000).pattern('yyyy/MM/dd HH:mm')}-${new Date(et.end_time * 1000).pattern('HH:mm')}\n\n点击链接直接加入会议：\n${et.join_url}\n\n会议 ID：${et.meeting_code}\n\n手机一键拨号入会\n+8675536550000,${et.meeting_code}# (中国大陆)\n+85230018898,,,2,${et.meeting_code}# (中国香港)\n\n根据您的位置拨号\n+8675536550000 (中国大陆)\n+85230018898 (中国香港)`);
          }
        }
      });
    } catch (error) {
      e = error;
      return log(e);
    }
  }
};

//			alex = await pickContact 'alex'
//			await alex.sync()
//			log alex
//			log bot

//			await checkAndAddGroup 'PET iRead', '您好，我是PET后英语时代的官方客服，感谢参加我们的活动'

//			bo =
//				group: 'PET SN Cocktail Party'
//				greeting: '您好，我是PET后英语时代的官方客服，感谢参加我们的活动'

//			rm = await pickRoom smGroup
//			log 'sssfdf'
//			mss = await rm.memberAll()
//			for cu in mss
//				log cu.name()
//				log isFriend = cu.friend()
//				unless isFriend
//					log 'fuxzzxcv'
//					log cu.name()
//					await dly()
//					try
//						await bot.Friendship.add cu
//					catch e
//						log e
//				unless cu.self()
//					await dly()
//					try
//						log 'del: ' + cu.name()
//						await rm.del cu
//					catch e
//						log e
//			await dly()
//			await rm.announce 'Hi您好，请添加alex的微信，我们的活动需要提前交费。谢谢😀'
//			for uu in initList
//				if ux = await pickContact(uu)
//					await dly()
//					await rm.add ux
//petSNS = await bot.Contact.find name: 'PET后英语时代'
//			await dly(5)
//			oneRoom = await pickRoom 'PET SN Cocktail Party'
//			await dly(3)
//			pcn = 0
//			if oneRoom
//				log 'send now...'
//				mss = await oneRoom.memberAll()
//				for ct in mss
//					if ct.gender() is bot.Contact.Gender.Male
//						pcn++
//						unless ct.friend()
//							log 'fuck: ' + ct.name()
//							continue
//						log pcn + '. ' + ct.name()
//						if pcn > 76
//							await dly(15)
//							str = 'Hi~ 如果有时间，有需要，欢迎参加【PET Bilingual Speed Dating No.8 @11.10】，女士报名已超过10人，需要更多男士参加~。如果不能参加，请帮忙转一下给有需要的朋友，非常感谢~[Laugh]'
//							url = 'http://temp.s.postenglishtime.com/activity_ad_5dc329d3eefa1c3d8214c53c.jpg'
//							await sendPicTxt ct, str, url
//	sendTodayEvt [testGroup], new Date()
//	await sendReadMsg [testGroup], readGreet()
//alex.say '坚持并提醒用户完成话题内容准备'
//	makeEarlyAnnounce()
//		makeMidAnnounce()
//put64 = (data, name, scope, pl = 'hb')->
//	ds =
//		hd: 'upload.qiniu.com' #华东
//		hb: 'upload-z1.qiniu.com' #华北
//		hn: 'upload-z2.qiniu.com' #华南
//		bm: 'upload-na0.qiniu.com' #北美

//	url = "http://#{ds[pl]}/put64/-1/key/#{name}"
//	request.debug = true
//	opt =
//		method: 'POST'
//		url: url
//		json: false
//		headers: {
//			'Content-Type': 'application/octet-stream'
//			'Authorization': 'UpToken ' + qiniu.sToken(c, {scope})
//		}
//		body: data
//	try
//		await request opt
//		return 'ok'
//	catch e
//		log 'fuck'
//		return 'err'

//		lrm = await pickRoom group
//		rm = await pickRoom group + '#'
//		if rm and lrm
//			newList = []
//			oldList = []
//			for it in await rm.memberAll()
//				await it.sync()
//				if it.friend()
//					await dly()
//					if await lrm.has(it)
//						if clean and (it.name() !in initList)
//							log 'del: ' + it.name()
//							await rm.del it
//					else
//						log 'add: ' + it.name()
//						await it.say '您好，感谢您来参加活动，现在邀请您进入我们的活动大群：）'
//						await dly(2)
//						await lrm.add it
//						oldList.push it.name()
//				else
//					if greeting
//						await addFriend it, greeting
//					newList.push it.name()
//			await alex.say "new: #{newList.join(',')}\n old: #{oldList.join(',')}"

//			if cu.friend()
//				unless await isInRoom(rm, cu)
//					rm.add cu
//			else
//				await bot.Friendship.add(cu, "您好，感谢参加我们的活动:）")
//			unless cu.self()
//				await rm.del cu
//		await rm.announce 'Hi您好，请添加alex的微信，我们的活动需要提前交费。谢谢😀'
//		for uu in initList
//			if ux = await pickContact(uu)
//				await dly(10)
//				await rm.add ux
