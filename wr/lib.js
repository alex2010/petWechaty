// Generated by CoffeeScript 2.3.2
var FileBox, MiniProgram, UrlLink, cfg, qr,
  indexOf = [].indexOf;

({FileBox, UrlLink, MiniProgram} = require('wechaty'));

qr = require('qr-image');

cfg = require('../../cfg');

module.exports = function(c, bot, qiniu) {
  var addFriend, cleanRoom, dly, fRoom, fcRoom, findTag, groupSay, makeAnnounce, miniBox, pickContact, pickContactId, pickRoom, saveQrCode, sendPicTxt, urlLink;
  dly = util.dly;
  pickContact = async function(name) {
    var e;
    if (name) {
      try {
        return (await bot.Contact.find({name}));
      } catch (error) {
        e = error;
        log(e);
        return null;
      }
    } else {
      return null;
    }
  };
  pickContactId = async function(id) {
    var e;
    if (id) {
      try {
        return (await bot.Contact.load(id));
      } catch (error) {
        e = error;
        log(e);
        return null;
      }
    } else {
      return null;
    }
  };
  pickRoom = async function(topic) {
    if (_.isString(topic)) {
      return (await bot.Room.find({topic}));
    } else if (topic) {
      return topic;
    } else {
      return null;
    }
  };
  fRoom = async function(fn) {
    var nn, rm;
    nn = `${fn}#`;
    rm = (await pickRoom(nn));
    if (rm) {
      return rm;
    } else {
      return (await pickRoom(fn));
    }
  };
  fcRoom = async function(fn, act) {
    var au, i, it, j, len, len1, ngn, nn, pu, ref, ref1, rm, u;
    nn = `${fn}#`;
    if (rm = (await pickRoom(fn))) {
      au = (await rm.memberAll());
      if (au.length < 90) {
        return rm;
      } else {
        if (rm = (await pickRoom(nn))) {
          return rm;
        }
      }
    }
    pu = [];
    ref = cfg.wtAccount.initUser;
    for (i = 0, len = ref.length; i < len; i++) {
      it = ref[i];
      pu.push((await pickContact(it)));
    }
    ngn = rm ? nn : fn;
    rm = (await bot.Room.create(pu, ngn));
    ref1 = (act.master || []).concatBy(act.speaker);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      it = ref1[j];
      u = (await pickContact(it.username));
      if (u) {
        pu.push(u);
      }
    }
    sendPicTxt(rm, 'Room init', tu.refFile(act, 'ad'));
    return rm;
  };
  addFriend = async function(u, msg) {
    var e;
    try {
      await dly(8);
      return (await bot.Friendship.add(u, msg || null));
    } catch (error) {
      e = error;
      log(e);
      return (await alex.say('AF fail: ' + u.name()));
    }
  };
  saveQrCode = async function(rm, scope, fn) {
    var str;
    if (_.isString(rm)) {
      rm = (await pickRoom(rm));
    }
    str = (await rm.qrcode());
    return qiniu.uploadStream(c, {
      scope: `${scope}:${fn}`
    }, fn, qr.image(str, function(res) {
      return log(res);
    }));
  };
  sendPicTxt = async function(agt, txt, imgUrl, link) {
    var e;
    try {
      if (_.isString(agt)) {
        agt = (await pickRoom(agt));
      }
      if (!agt) {
        return;
      }
      if (_.isString(txt) && txt.trim()) {
        await agt.say(txt);
      }
      if (imgUrl && (await checkUrl(imgUrl))) {
        await dly(2);
        await agt.say(FileBox.fromUrl(cf._qnSetHref(imgUrl, 'rbImg'), 'pic.jpg'));
      }
      if (link) {
        await dly(2);
        return (await agt.say(link));
      }
    } catch (error) {
      e = error;
      return log(e);
    }
  };
  makeAnnounce = async function(topic, text, pic, ul) {
    var e, i, it, len, results, rm;
    if (!topic) {
      return;
    }
    if (!_.isArray(topic)) {
      topic = [topic];
    }
    results = [];
    for (i = 0, len = topic.length; i < len; i++) {
      it = topic[i];
      try {
        rm = _.isString(it) ? (await pickRoom(it)) : it;
        if (rm) {
          await dly();
          if (text) {
            await dly(1);
            if (rm.owner().name() === bot.userSelf().name()) {
              await rm.announce(text);
            } else {
              await rm.say(text);
            }
          }
          if (pic) {
            await dly(1);
            await rm.say(FileBox.fromUrl(cf._qnSetHref(pic, 'rbImg'), 'pic.jpg'));
          }
          if (ul) {
            await dly(1);
            results.push((await rm.say(ul)));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      } catch (error) {
        e = error;
        results.push(log(e));
      }
    }
    return results;
  };
  groupSay = async function(topic, text, pic, ul) {
    var e, i, it, len, results;
    if (!topic) {
      return;
    }
    if (!_.isArray(topic)) {
      topic = [topic];
    }
    results = [];
    for (i = 0, len = topic.length; i < len; i++) {
      it = topic[i];
      try {
        results.push((await sendPicTxt(it, text, pic, ul)));
      } catch (error) {
        e = error;
        results.push(log(e));
      }
    }
    return results;
  };
  cleanRoom = async function(rName, ann, msg, remove) {
    var i, it, len, ref, ref1, rm;
    if (rm = (await pickRoom(rName))) {
      if (ann) {
        await rm.announce(ann);
      }
      await dly(2);
      ref = (await rm.memberAll());
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        if (remove) {
          await rm.del(it);
        } else if (ref1 = it.name(), indexOf.call(cfg.wtAccount.initUser, ref1) < 0) {
          if (it.friend()) {
            await rm.del(it);
          } else {
            log('del: ' + it.name());
            await addFriend(it, msg);
          }
        }
      }
      if (remove) {
        return (await rm.quit());
      }
    }
  };
  urlLink = function(title, desc, thumb, url) {
    return new UrlLink({
      title: title,
      description: desc,
      thumbnailUrl: thumb,
      url: url
    });
  };
  miniBox = function(title, desc, path, url) {
    return new MiniProgram({
      appid: cf.mini.appId,
      description: desc,
      pagePath: path,
      thumbKey: '',
      thumbUrl: url,
      title: title,
      username: cf.mini.username
    });
  };
  findTag = async function(ct, tag) {
    var e, i, len, t, ts;
    try {
      await dly();
      ts = (await ct.tags());
      for (i = 0, len = ts.length; i < len; i++) {
        t = ts[i];
        if (t.id === tag) {
          true;
        }
      }
      return false;
    } catch (error) {
      e = error;
      log(e);
      return false;
    }
  };
  return {pickContact, pickContactId, pickRoom, fRoom, fcRoom, addFriend, saveQrCode, sendPicTxt, makeAnnounce, groupSay, cleanRoom, urlLink, miniBox, findTag};
};
