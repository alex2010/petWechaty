// Generated by CoffeeScript 2.3.2
var readEGreet, readGreet, readMGreet, schedule;

schedule = require('node-schedule');

readEGreet = function(d) {
  switch (d.getDay()) {
    case 1:
      return null;
    case 2:
      return '晚上好，今天的朗读内容有什么问题吗？欢迎在群里讨论哦~';
    case 3:
      return 'Good evening. Any questions about today\'s reading? Welcome to discuss in the group~';
    case 4:
      return '晚上好，今天的朗读你完成了吗？友情提示：读完记得听听自己的朗读，对比一下原声，这是朗读小程序的正确使用方法';
    case 5:
      return '周末快乐~ 睡觉前记得完成今天的朗读内容哦，晚安';
    case 6:
      return 'Reading Tips: Listen to your own reading and compare to the original, this is the correct way to use this mini app.';
    case 0:
      return null;
  }
};

readMGreet = function(d) {
  switch (d.getDay()) {
    case 1:
      return null;
    case 2:
      return "Morning, dear friend, practice makes perfect! Let's start to read aloud.";
    case 3:
      return "坚持就是胜利，想要提升口语就要多多练习，加油~";
    case 4:
      return "Morning, dear friend, persistence is victory! Let's continue to exercise the English oral muscles together.";
    case 5:
      return "TGIF, finally the weekend is coming, today's English sentence is very interesting, don't miss it.";
    case 6:
      return "Morning, dear friend, Wish you have a great weekend and don't forget to read English aloud:)";
    default:
      return "周末愉快，今天是【PET一周朗读计划】最后一天，除了好好休息，别忘完成英文朗读哦~";
  }
};

readGreet = function() {
  var d, h;
  d = new Date;
  h = d.getHours();
  if (h < 13) {
    return readMGreet(d);
  } else {
    return readEGreet(d);
  }
};

module.exports = function(c, bot, qiniu) {
  var addFriend, bigGroup, bjGroup, cleanRoom, code, dly, drGroup, evtGroup, evtLink, exGroup, fRoom, fcRoom, groupSay, inGroup, inThatDay, initList, makeAnnounce, petQr, picUrl, pickContact, pickContactId, pickRoom, saveQrCode, sendAggEvt, sendPicTxt, sendReadMsg, smGroup, testGroup, todayEvt, urlLink, workLink;
  if (bot.userSelf().name() !== '可爱的PET') {
    return;
  }
  code = c.code;
  ({pickRoom, fRoom, fcRoom, addFriend, pickContact, pickContactId, saveQrCode, sendPicTxt, makeAnnounce, groupSay, urlLink, cleanRoom, initList} = require('./lib')(c, bot, qiniu));
  ({bigGroup, inGroup, exGroup, smGroup, evtGroup, bjGroup, drGroup, testGroup, petQr} = require('./def'));
  dly = util.dly;
  picUrl = cf._qnSetHref(util.qnUrl('show', '8444042109959.jpg'));
  workLink = urlLink('PET今日任务列表', '今日事，今日毕！请完成今天的社区工作，不要偷懒哦~', picUrl, 'http://postenglishtime.com/wt#!/home/weekPlan');
  evtLink = urlLink('PET Weekly Events', 'PET 一周活动汇总', picUrl, 'http://postenglishtime.com/wm');
  sendReadMsg = async function(gp, text) {
    var d, dr;
    d = new Date();
    dr = (await dao.one(code, 'dayRead', {
      dateStr: d.pattern('yyyy-MM-dd')
    }));
    if (dr) {
      await groupSay(gp, text, cf._qnSetEnt(dr, 'share', 0, 'rbImg'));
      if (dr.shareStr) {
        return (await groupSay(testGroup, dr.shareStr));
      }
    }
  };
  inThatDay = function(d = new Date()) {
    var $gte, $lte;
    d.setHours(5);
    $gte = d;
    $lte = new Date(d.getTime());
    $lte.setHours(23, 30, 0);
    return {$gte, $lte};
  };
  todayEvt = async function(d = new Date(), cat) {
    var p, q;
    q = {
      startedDate: inThatDay(d),
      status: 2
    };
    if (cat) {
      q.cat = cat;
    }
    p = {
      sort: {
        startedDate: 1
      }
    };
    return (await dao.find(code, 'activity', q, p));
  };
  sendAggEvt = async function(gp, acts) {
    var adStr, i, it, len;
    if (acts.length > 0) {
      adStr = `PET 本${new Date(acts[0].startedDate).pattern('EE')}活动快讯\n\n`;
      for (i = 0, len = acts.length; i < len; i++) {
        it = acts[i];
        adStr += `【${new Date(it.startedDate).pattern('HH:mm')}-${new Date(it.endDate).pattern('HH:mm')}】${it.adStr || it.brief || it.title}\n\n`;
      }
      adStr += '活动详情请点击: \nhttp://postenglishtime.com/wm';
      adStr += '\n\n-- PET后英语时代，聊英文 交朋友 分享你的经历';
      return (await groupSay(gp, adStr));
    }
  };
  schedule.scheduleJob('0 0 7 * * 0-6', async function() { // morning
    var allGroup, d, iu, lastWeek, omsg, p, q, rd, thisWeek, ul;
    //	schedule.scheduleJob '0 50 12 * * 0-6', -> # morning
    d = new Date();
    if (d.getDay() === 1) { // send read group
      q = {
        cat: 'weekRead'
      };
      p = {
        limit: 2,
        sort: {
          startedDate: -1
        }
      };
      [thisWeek, lastWeek] = (await dao.find(code, 'activity', q, p));
      rd = (await dao.one(code, 'readReport', {
        'nextAct._id': thisWeek._id
      }));
      if (rd && rd.mondayMsg) {
        iu = util.qnUrl('temp', `activity_ad_${thisWeek._id}.jpg`, c);
        ul = urlLink(rd.title, rd.subTitle, cf._qnSetHref(util.refFile(lastWeek), 'wideFix'), `http://postenglishtime.com/readReport/${rd._id}`);
        await makeAnnounce(drGroup, rd.mondayMsg, iu, ul);
        omsg = "新鲜出炉的【PET一周朗读计划】报告，里面有小伙伴的精彩朗读，快来听一下吧[ThumbsUp]\n\n拥有正确的发音习惯需要坚持有反馈的练习，欢迎朋友们参加我们的PET一周朗读计划，让我们一起读英文，练发音，涨知识，最后还能赢大奖哦🎁 \n\n周一的英文选段总是满满正能量，让我们开始今天的英文朗读吧[KeepFighting]";
        allGroup = [...bigGroup, ...inGroup];
        allGroup.remove(drGroup);
        await groupSay(allGroup, omsg, null, ul);
        if (thisWeek.adStr) {
          await sendPicTxt(testGroup, null, thisWeek.adStr);
        }
      }
    }
    await sendReadMsg(bigGroup, readGreet());
    await sendReadMsg(inGroup);
    await sendReadMsg(exGroup);
    return (await groupSay(testGroup, workLink));
  });
  schedule.scheduleJob('0 30 12 * * 0-6', async function() {
    var act, actLink, acts, all, ao, da, dstr, i, it, j, k, len, len1, len2, pic, ref, ref1, results, rm, sgn, sy;
    da = new Date();
    dstr = new Date().monday().pattern('yyyy_MM_dd');
    all = [...bigGroup, ...exGroup, ...inGroup];
    switch (da.getDay()) {
      case 0:
        ref = (await todayEvt(new Date().addDays(1), 'weekRead'));
        for (i = 0, len = ref.length; i < len; i++) {
          act = ref[i];
          await dly();
          await groupSay(all, act.adStr, util.refFile(act, 'ad'));
        }
        break;
      case 1:
        rm = (await pickRoom(smGroup)); // so meet
        if (rm) {
          sgn = (await dao.one(code, 'agentOp', {
            code: 'smGroupNotice'
          }));
          await makeAnnounce(rm, sgn.content, petQr);
          await dly(1);
          await saveQrCode(rm, 'temp', `smp_${dstr}.jpg`);
        }
        ao = (await dao.one(code, 'agentOp', {
          code: 'newFriends'
        }));
        if (ao) {
          await dly();
          await makeAnnounce(evtGroup, ao.content, petQr);
        }
        await dly();
        sendAggEvt(all, (await todayEvt(da.addDays(2))));
        break;
      case 2:
        await dly();
        sy = (await dao.one(code, 'syncEntity', {
          title: `evt ${new Date().monday().pattern('yyyy-MM-dd')}`
        }));
        if (sy) {
          await makeAnnounce(bigGroup, sy.weekday, null, evtLink);
          await dly();
          await groupSay([...inGroup, ...exGroup], sy.weekday, null, evtLink);
        }
        break;
      case 3:
        log('周五');
        sendAggEvt(all, (await todayEvt(da.addDays(2))));
        break;
      case 4:
        log('周六');
        sendAggEvt(all, (await todayEvt(da.addDays(2))));
        break;
      case 5:
        sy = (await dao.one(code, 'syncEntity', {
          title: `evt ${new Date().monday().pattern('yyyy-MM-dd')}`
        }));
        if (sy) {
          await makeAnnounce(bigGroup, sy.weekend, null, evtLink);
          await dly();
          await groupSay([...inGroup, ...exGroup], sy.weekend, null, evtLink);
        }
        break;
      case 6:
        sendAggEvt(all, (await todayEvt(da.addDays(1))));
    }
    acts = (await dao.find(code, 'activity', {
      pubTime: new Date().pattern('yyyy-MM-dd'),
      groupName: {
        $exists: true
      },
      status: 2
    }));
    for (j = 0, len1 = acts.length; j < len1; j++) {
      it = acts[j];
      pic = util.refFile(it, 'ad');
      await makeAnnounce(it.groupName, it.adStr || it.brief, pic);
    }
    ref1 = (await todayEvt());
    results = [];
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      act = ref1[k];
      if (!(act.groupName && act.remindMsg)) {
        continue;
      }
      await dly();
      if (rm = (await fRoom(act.groupName))) {
        actLink = urlLink(act.title, act.adStr || act.brief, util.refFile(act, 'ad'), `http://postenglishtime.com/newAct/activity/${act._id}`);
        results.push((await makeAnnounce(rm, act.remindMsg, null, actLink)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
  return schedule.scheduleJob('0 0 22 * * 0-6', async function() {
    var act, acts, alll, catStr, cms, cr, d, ds, hName, host, i, it, j, k, l, len, len1, len2, m, msg, nd, ob, p, p1, p2, q, ref, results, rm, rp, rs, tpp, wp;
    d = new Date();
    switch (d.getDay()) {
      case 1:
        await cleanRoom(smGroup, '您好，我是PET后英语时代的官方客服，感谢参加我们的活动', 'del');
        await makeAnnounce(smGroup, 'Hi您好，请添加我的微信，我们的活动需要提前交费，有什么问题可以给我留言。谢谢😀');
        rp = (await dao.one(code, 'activity', {
          cat: 'weekRead',
          sort: {
            startedDate: -1
          }
        }));
        if (rp && rp.attention) {
          msg = 'Hi您好, 感谢您参加【PET一周朗读计划】，请留意我们的评分规则[Smart]：\n\n';
          msg += rp.attention.join('\n\n');
          msg += "\n\n今天是第一天，万事开头难，记得完成今天的朗读内容哦[KeepFighting]，晚安[Moon]";
          await makeAnnounce(drGroup, msg);
        }
        break;
      case 2:
        acts = (await dao.find(code, 'activity', {
          dbId: {
            $exists: true
          },
          startedDate: {
            $gt: new Date().monday()
          }
        }));
        cms = (await dao.find(code, 'codeMap', {
          key: 'dbr',
          status: 2
        }));
        cms = _.shuffle(cms);
        for (i = 0, len = acts.length; i < len; i++) {
          it = acts[i];
          await app.dbReg(cms, it.dbId);
        }
        break;
      case 4:
        nd = new Date().monday().addDays(7);
        wp = (await dao.one(code, 'weekPlan', {
          dateStr: nd.pattern('yyyy-MM-dd')
        }));
        if (!wp) {
          ob = {
            dateStr: nd.pattern('yyyy-MM-dd'),
            weekGoal: 'set this week goal plz'
          };
          q = {
            weekDay: 'all'
          };
          p = {
            projection: queryUtil.attrs('title,description,minute'),
            sort: {
              row: -1
            }
          };
          alll = (await dao.find(code, 'dailyWork', q, p));
          for (it = j = 1; j <= 7; it = ++j) {
            q = {
              weekDay: it + ''
            };
            ob[`d${it}`] = alll.concat((await dao.find(code, 'dailyWork', q, p)));
          }
          await dao.save(code, 'weekPlan', ob);
        }
        rp = (await dao.one(code, 'activity', {
          cat: 'weekRead',
          sort: {
            startedDate: -1
          }
        }));
        // read plan
        if (rp && rp.startedDate < new Date()) {
          [p1, p2] = rp.title.split('.');
          rp.title = [p1, +p2 + 1].join('.');
          delete rp._id;
          rp.startedDate = rp.startedDate.addDays(7);
          rp.endDate = rp.endDate.addDays(7);
          rp.viewCount = 0;
          rp.refFile = {
            head: rp.refFile.head
          };
          rp = (await dao.save(code, 'activity:title', rp));
          rp = rp[0];
          catStr = {
            1: 'wisdomWord',
            2: 'series',
            3: 'news',
            4: 'series',
            5: 'poem',
            6: 'movie',
            7: 'book'
          };
          rp = _.pick(rp, 'title', '_id');
          nd = new Date().monday().addDays(6);
          for (it = k = 1; k <= 7; it = ++k) {
            nd.addDays(1);
            ds = nd.pattern('yyyy-MM-dd');
            cr = (await dao.one(code, 'dayRead', {
              dateStr: ds
            }));
            if (!cr) {
              await dao.save(code, 'dayRead', {
                dateStr: ds,
                activity: rp,
                cat: catStr[it],
                status: 2,
                level: it === 1 ? '1' : '3'
              });
            }
          }
        }
        break;
      case 0:
        await makeAnnounce(drGroup, "Hi小伙伴们，本周【PET朗读计划】马上就要结束了，评选会在凌晨进行，请还没有完成朗读内容的小伙伴们抓紧时间了！");
        nd = new Date();
        q = {
          status: 2,
          dateStr: {
            $gte: nd.monday().pattern('yyyy-MM-dd'),
            $lte: nd.sunday().pattern('yyyy-MM-dd')
          }
        };
        rs = (await dao.find(code, 'dayRead', q));
        rm = (await pickRoom(drGroup));
        for (l = 0, len1 = rs.length; l < len1; l++) {
          it = rs[l];
          await sendPicTxt(rm, null, util.refFile(it, 'share'));
        }
    }
    await sendReadMsg(bigGroup, readGreet());
    ref = (await todayEvt());
    //		d = new Date()
    //		d.addDays(1)
    //		d.setHours 12, 0, 0
    //		if d.getDay() isnt 1
    //			await sendAggEvt [bigGroup..., inGroup...], await todayEvt d
    results = [];
    for (m = 0, len2 = ref.length; m < len2; m++) {
      act = ref[m];
      await dly();
      if (act.groupName) {
        rm = (await fRoom(act.groupName));
        if (rm) {
          if (act.master.length) {
            hName = act.master[0].username;
          }
          if ((tpp = (await rm.topic())) && tpp.endsWith('#')) {
            if (act.cat === 'salon') {
              if (host = (await pickContact(hName))) {
                await host.say(`hi ${hName}，感谢晚上精彩的分享，有时间写一下主持人总结吧，之后会生成一份活动回顾，配上照片和视频。页面里面还有feedback选项，可以看到别人给你的反馈。\nhttp://postenglishtime.com/newAct/activity/${act._id}#!/enroll/cs`);
                await dly();
              }
            }
            if (act.endMsg) {
              results.push((await makeAnnounce(rm, act.endMsg.replaceAll('###', hName), petQr)));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
};
