// Generated by CoffeeScript 2.3.2
var FileBox, MiniProgram, UrlLink;

({UrlLink, MiniProgram, FileBox} = require('wechaty'));

module.exports = function(pre, app, bot, c, qiniu) {
  var addFriend, bigGroup, cleanRoom, code, dly, e, exGroup, findTag, groupSay, inGroup, makeAnnounce, miniBox, pickRoom, urlLink;
  code = c.code;
  dly = util.dly;
  ({pickRoom, addFriend, cleanRoom, makeAnnounce, groupSay, miniBox, urlLink, findTag} = require('./lib')(bot, qiniu));
  ({bigGroup, inGroup, exGroup} = require('./def'));
  app.post(`${pre}evt/ctrl`, function(req, rsp) {
    if (req.body.on) {
      bot.start();
    } else {
      bot.logout();
    }
    return rsp.send({});
  });
  app.post(`${pre}evt/info`, function(req, rsp) {
    return rsp.json({
      name: bot.userSelf().name(),
      status: bot.logonoff(),
      bigGroup,
      inGroup,
      exGroup
    });
  });
  app.post(`${pre}evt/pubUserMsg`, async function(req, rsp) {
    var bo, desc, e, k, link, ref, text, title, u, v;
    bo = req.body;
    try {
      ref = bo.ds;
      for (k in ref) {
        v = ref[k];
        if (v && (u = (await pickContact(k)))) {
          await dly();
          if (bo.img && bo.url) {
            [title, desc, text] = v.split('||');
            link = new UrlLink({
              title: title,
              description: desc,
              thumbnailUrl: cf._qnSetHref(bo.img, 'rbImg'),
              url: bo.url
            });
            await u.say(link);
            if (text) {
              await dly(1);
              await u.say(text);
            }
          } else {
            await u.say(v);
            bo.img && (await u.say(FileBox.fromUrl(cf._qnSetHref(bo.img, 'rbImg'))));
          }
        }
      }
    } catch (error) {
      e = error;
      log(e);
    }
    return rsp.json({
      msg: 'ok'
    });
  });
  app.post(`${pre}evt/addGroup`, async function(req, rsp) {
    var bo, i, it, len, ref, rm, ulist;
    bo = req.body;
    rm = (await pickRoom(bo.group));
    ulist = [];
    if (rm) {
      ref = (await rm.memberAll());
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        if (it.friend()) {
          if (bo.text) {
            await dly();
            await it.say(bo.text);
          }
        } else {
          if (bo.greeting) {
            await addFriend(it, bo.greeting);
          }
          ulist.push(it.name());
        }
      }
      return rsp.json({
        msg: ulist.join(',')
      });
    }
  });
  app.post(`${pre}evt/msgList`, async function(req, rsp) {
    var bo, e, gp, gstr, hMap, i, it, j, l, len, len1, len2, list, mmsg, mr, ns, ob, offset, ref, ref1, total, u;
    bo = req.body;
    if (bo.group === 'all') {
      list = (await bot.Contact.findAll());
      mr = (await dao.find(code, 'wtMsgRecord'));
      hMap = {};
      if (!(mmsg = bo.msgs)) {
        rsp.json({
          err: true,
          msg: 'no msg'
        });
      }
      for (i = 0, len = mr.length; i < len; i++) {
        u = mr[i];
        hMap[u.id] = 1;
      }
      for (j = 0, len1 = list.length; j < len1; j++) {
        it = list[j];
        if (it.friend()) {
          if ((ref = it.name()) === '学海无涯' || ref === '乐水') {
            continue;
          }
          try {
            if (!hMap[it.id]) {
              gstr = Math.random() > 0.75 ? mmsg[0] : Math.random() > 0.50 ? mmsg[1] : Math.random() > 0.25 ? mmsg[2] : mmsg[3];
              await it.say(gstr);
              if (bo.code) {
                await dao.save(code, 'wtMsgRecord', {
                  code: bo.code + bot.userSelf().id,
                  name: it.name(),
                  wid: it.payload.weixin,
                  time: Date.now(),
                  id: it.id
                });
              }
              log(it.name());
              await dly(3);
            }
          } catch (error) {
            e = error;
            log(e);
          }
        }
      }
    } else {
      await bot.userSelf().sync();
      if (bo.wid) {
        ob = {
          name: bo.wid
        };
      }
      if (bo.regular) {
        ob = {
          name: new RegExp(bo.regular, 'g')
        };
      }
      if (bo.alias) {
        ob = {
          alias: bo.alias
        };
      }
      if (bo.group) {
        if (gp = (await pickRoom(bo.group))) {
          list = [];
          ref1 = (await gp.memberAll(ob));
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            it = ref1[l];
            if (it.friend()) {
              list.push(it);
            } else {
              log(it.name());
            }
          }
        } else {
          rsp.json({
            msg: 'no group'
          });
          return;
        }
      } else {
        list = (await (async function() {
          var len3, m, ref2, results;
          ref2 = (await bot.Contact.findAll(ob));
          results = [];
          for (m = 0, len3 = ref2.length; m < len3; m++) {
            it = ref2[m];
            if (it.friend()) {
              results.push(it);
            }
          }
          return results;
        })());
      }
      offset = +bo.offset || 0;
      total = list.length;
      list = list.slice(offset, offset + 500);
      ns = (function() {
        var len3, m, results;
        results = [];
        for (m = 0, len3 = list.length; m < len3; m++) {
          it = list[m];
          results.push(it.payload.alias || it.name());
        }
        return results;
      })();
    }
    return rsp.json({ns, total});
  });
  app.post(`${pre}evt/mgmGroup`, async function(req, rsp) {
    var bo, i, it, len, ref, rm;
    bo = req.body;
    rm = (await pickRoom(bo.group));
    if (rm) {
      switch (bo.type) {
        case 'addAll':
          ref = (await rm.memberAll());
          for (i = 0, len = ref.length; i < len; i++) {
            it = ref[i];
            if (!it.friend()) {
              await addFriend(it, bo.greeting);
            }
          }
          break;
        case 'say':
          if (bo.fmt === 'msgPic') {
            await rm.say(urlLink(bo.title, bo.greeting, bo.url, bo.img));
          } else if (bo.fmt === 'mini') {
            await rm.say(miniBox(bo.title, bo.greeting, bo.url, bo.img));
          } else {
            await groupSay(rm, bo.greeting, bo.url);
          }
          break;
        case 'announce':
          await makeAnnounce(rm, bo.greeting, bo.url);
          break;
        case 'clean':
          if (bo.group.endsWith('#')) {
            await cleanRoom(rm, bo.ann, bo.greeting);
          }
          break;
        case 'del':
          if (bo.group.endsWith('#')) {
            await cleanRoom(rm, void 0, void 0, true);
          }
      }
      return rsp.json({
        msg: 'ok'
      });
    } else {
      return rsp.json({
        err: true
      });
    }
  });
  app.post(`${pre}evt/mgmUser`, async function(req, rsp) {
    var bo, cList, i, idx, it, j, len, len1, ro;
    bo = req.body;
    ro = {};
    cList = (await bot.Contact.findAll());
    switch (bo.type) {
      case 'unfriend':
        ro.unList = [];
        ro.tc = cList.length;
        ro.nfc = 0;
        ro.nc = 0;
        for (i = 0, len = cList.length; i < len; i++) {
          it = cList[i];
          if (it.friend()) {
            ro.unList.push({
              name: it.name(),
              wid: it.payload.weixin
            });
          } else if (it.friend() === false) {
            ro.nfc++;
          } else {
            ro.nc++;
          }
        }
        ro.fc = ro.unList.length;
        break;
      case 'tag':
        ro.tagList = [];
        for (idx = j = 0, len1 = cList.length; j < len1; idx = ++j) {
          it = cList[idx];
          if (idx > 500) {
            break;
          }
          if (it.friend()) {
            if ((await findTag(it, bo.tag))) {
              tagList.push(it);
            }
          }
        }
        break;
      case 'untagFriend':
        log('untag');
        break;
      case 'del':
        log('del');
    }
    return rsp.json(ro);
  });
  if (bot.logonoff()) {
    log('self start...');
    try {

    } catch (error) {
      //			await dly()
      //			await bot.userSelf().sync()
      //			log cc = await bot.Contact.load 'Yukixue001'
      //			for it in await cc.tags()
      //				log it.id
      //			log await bot.userSelf().tags()
      //			log await bot.Contact.tags()
      //			log await Tag.get('PET')
      //			u = await bot.Contact.find name: '可爱的PET'
      //			try
      //				u.say miniBox('test', 'sadfsdf', '/', 'http://show.s.postenglishtime.com/0CSQbzKTt.jpg')
      //			catch e
      //				log e
      e = error;
      return log(e);
    }
  }
};
